<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Admin Area</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.16/vue.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.21.0/moment.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.0/socket.io.js"></script>
</head>

<body class="container text-center bg-dark">
  <br>
  <div id="app" class="card">
    <div class="card-body">
      <h1>Admin Area</h1>
      <p>Socket: {{ socketStatus }}</p>
      <br>
      <div v-if="initialLoad">
        <div v-if="socketConnected">
          <h4>Server</h4>
          <br>
          <p>CPU</p>
          <div class="progress">
            <div class="progress-bar" v-bind:class="usageClass('cpu')" v-bind:style="{ width: usage.cpu }">{{ usage.cpu }}</div>
          </div>
          <br>
          <p>Memory</p>
          <div class="progress">
            <div class="progress-bar" v-bind:class="usageClass('memory')" v-bind:style="{ width: usage.memory }">{{ usage.memory }}</div>
          </div>
          <br><br>
          <div v-if="environment.onHeroku">
            <button class="btn btn-danger" v-on:click="restartDynos" v-bind:disabled="socketDisconnected || restarting">
              <span v-if="restarting">Restarting...</span>
              <span v-else>Restart Dynos</span>
              <span>&nbsp;</span>
              <i class="fa fa-refresh" v-bind:class="{ 'fa-spin': restarting, 'fa-pulse': restarting }"></i>
            </button>
            <br><br><br>
            <h5>Format Selection</h5>
            <button class="btn btn-danger" v-if="environment.allowFormatSelection" v-on:click="setConfigVar('ALLOW_FORMAT_SELECTION', null)">
              <span>Disable</span>
            </button>
            <button class="btn btn-success" v-else v-on:click="setConfigVar('ALLOW_FORMAT_SELECTION', 'true')">
              <span>Enable</span>
            </button>
            <br><br>
            <h5>Quality Selection</h5>
            <button class="btn btn-danger" v-if="environment.allowQualitySelection" v-on:click="setConfigVar('ALLOW_QUALITY_SELECTION', null)">
              <span>Disable</span>
            </button>
            <button class="btn btn-success" v-else v-on:click="setConfigVar('ALLOW_QUALITY_SELECTION', 'true')">
              <span>Enable</span>
            </button>
            <br><br>
            <h5>Filename Selection</h5>
            <button class="btn btn-danger" v-if="environment.allowRequestedName" v-on:click="setConfigVar('ALLOW_REQUESTED_NAME', null)">
              <span>Disable</span>
            </button>
            <button class="btn btn-success" v-else v-on:click="setConfigVar('ALLOW_REQUESTED_NAME', 'true')">
              <span>Enable</span>
            </button>
          </div>
          <br><br>
        </div>
        <h4>DB Dumps ({{ dbs.length }})</h4>
        <button class="btn btn-link text-dark text-center" v-on:click="toggle('Dbs')">
          <span v-if="hideDbs">Show</span>
          <span v-else>Hide</span>
        </button>
        <button class="btn btn-link text-primary text-center" v-on:click="dbDump()" v-bind:disabled="socketDisconnected || inFlight.dbs === 'dumping'">
          <span v-if="inFlight.dbs === 'dumping'">Dumping...</span>
          <span v-else>Dump DB</span>
        </button>
        <button class="btn btn-link text-danger text-center" v-on:click="dbDump('delete')" v-bind:disabled="socketDisconnected || inFlight.dbs === 'deleting'">
          <span v-if="inFlight.dbs === 'deleting'">Deleting...</span>
          <span v-else>Delete All DB Dumps</span>
        </button>
        <br><br>
        <div class="table-responsive" v-bind:class="{ 'd-none': hideDbs }">
          <table class="table table-bordered">
            <thead class="thead-light">
              <tr>
                <th>Datetime</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="db in dbs">
                <td>{{ db.datetime }}</td>
                <td>
                  <a class="btn btn-link text-primary" v-bind:href="'/api/admin/download/db/' + db.id" v-bind:class="{ disabled: socketDisconnected }"><i class="fa fa-download"></i></a>
                  <button class="btn btn-link text-danger" v-on:click="dbDump('delete', db.id)" v-bind:disabled="socketDisconnected"><i class="fa fa-trash"></i></button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        <br>
        <h4>Logs ({{ logs.length }})</h4>
        <button class="btn btn-link text-dark text-center" v-on:click="toggle('Logs')">
          <span v-if="hideLogs">Show</span>
          <span v-else>Hide</span>
        </button>
        <button class="btn btn-link text-danger text-center" v-on:click="remove('logs')" v-bind:disabled="socketDisconnected || inFlight.logs">
          <span v-if="inFlight.logs">Deleting...</span>
          <span v-else>Delete All Logs</span>
        </button>
        <br><br>
        <div class="table-responsive" v-bind:class="{ 'd-none': hideLogs }">
          <table class="table table-bordered">
            <thead class="thead-light">
              <tr>
                <th>Datetime</th>
                <th>Level</th>
                <th>Originator</th>
                <th>Message</th>
                <th>Data</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="log in logs">
                <td>{{ log.datetime }}</td>
                <td>{{ log.level }}</td>
                <td>{{ log.originator }}</td>
                <td>{{ log.message }}</td>
                <td>{{ log.data }}</td>
                <td>
                  <button class="btn btn-link text-danger" v-on:click="remove('logs', log.id)" v-bind:disabled="socketDisconnected"><i class="fa fa-trash"></i></button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        <br>
        <h4>Downloaded Files ({{ downloads.length }})</h4>
        <button class="btn btn-link text-dark text-center" v-on:click="toggle('Downloads')">
          <span v-if="hideDownloads">Show</span>
          <span v-else>Hide</span>
        </button>
        <button class="btn btn-link text-danger text-center" v-on:click="remove('downloads')" v-bind:disabled="socketDisconnected || inFlight.downloads">
          <span v-if="inFlight.downloads">Deleting...</span>
          <span v-else>Delete All Files</span>
        </button>
        <br><br>
        <div class="table-responsive" v-bind:class="{ 'd-none': hideDownloads }">
          <table class="table table-bordered">
            <thead class="thead-light">
              <tr>
                <th>Datetime</th>
                <th>Client ID</th>
                <th>Name</th>
                <th>URL</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="download in downloads">
                <td>{{ download.datetime }}</td>
                <td>{{ download.clientId }}</td>
                <td>{{ download.name }}</td>
                <td>{{ download.url }}</td>
                <td>
                  <a class="btn btn-link text-primary" v-if="download.exists" v-bind:href="'/api/download_file/' + download.id" v-bind:class="{ disabled: socketDisconnected }"><i class="fa fa-download"></i></a>
                  <button class="btn btn-link text-danger" v-on:click="remove('downloads', download.id)" v-bind:disabled="socketDisconnected"><i class="fa fa-trash"></i></button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div v-else>
        Loading...
      </div>
    </div>
  </div>
  <script>
    let app = new Vue({
      el: '#app',
      data: {
        socketDisconnected: true,
        environment: {},
        initialLoad: false,
        restarting: false,
        inFlight: {
          dbs: false,
          downloads: false,
          logs: false,
        },
        usage: {
          cpu: '0%',
          memory: '0%'
        },
        dbs: [],
        downloads: [],
        logs: [],
        hideDbs: false,
        hideLogs: false,
        hideDownloads: false
      },
      computed: {
        socketConnected: function() {
          return !this.socketDisconnected;
        },
        socketStatus: function() {
          return this.socketDisconnected ? 'Disconnected' : 'Connected';
        }
      },
      methods: {
        restartDynos: () => {
          if (confirm('Are you sure?')) {
            app.restarting = true;
            socket.emit('reboot');
            socket.once('reboot success', () => {
              app.restarting = false;
            });
          }
        },
        remove: (table, id) => {
          if (confirm('Are you sure? This cannot be undone.')) {
            app.inFlight[table] = !id;
            socket.emit('delete', table, id);
            socket.once('delete success', () => {
              app.inFlight[table] = false;
            });
          }
        },
        dbDump: (action, id) => {
          if (action !== 'delete' || confirm('Are you sure? This cannot be undone.')) {
            let eventName = action === 'delete' ? 'db dump delete' : 'db dump';
            if (!id) {
              app.inFlight.dbs = action === 'delete' ? 'deleting' : 'dumping';
            }
            socket.emit(eventName, id);
            socket.once('db dump success', () => {
              app.inFlight.dbs = false;
            });
          }
        },
        setConfigVar: (key, value) => {
          if (confirm('Are you sure? The server will restart to apply this change.')) {
            socket.emit('set config var', key, value);
          }
        },
        toggle: (table) => {
          let prop = `hide${table}`;
          app[prop] = !app[prop];
        },
        usageClass: (type) => {
          let object = {};
          let usage = parseInt(app.usage[type].slice(0, -1));
          let bsClass;
          if (usage > 40 && usage < 75) {
            bsClass = 'warning';
          } else if (usage >= 75) {
            bsClass = 'danger';
          } else {
            bsClass = 'success';
          }
          object[`bg-${bsClass}`] = true;
          return object;
        }
      }
    });

    let socket = io('/admin');
    let pageHash;

    socket.on('connect', () => {
      app.socketDisconnected = false;
      socket.emit('credentials', '<%= username %>', '<%= password %>');
    });

    socket.on('disconnect', () => {
      app.socketDisconnected = true;
    });

    socket.on('info', (info) => {
      app.environment = info.environment;
      Object.keys(info.usage).forEach((key) => {
        let val = info.usage[key];
        app.usage[key] = `${(val * 100).toFixed(2)}%`;
      });
      app.dbs = info.dbs;
      app.downloads = info.downloads;
      app.logs = info.logs;
      app.initialLoad = true;
    });

    socket.on('page hash', (hash) => {
      if (pageHash && pageHash !== hash) {
        window.location.reload();
      }
      pageHash = hash;
    });
  </script>
</body>

</html>
